import warnings
import math
import torch


class UniformSampler(torch.utils.data.IterableDataset):
    def __init__(self, low, high, size, dtype=None, generator=None):
        super().__init__()
        self.low = low
        self.high = high
        self.size = size
        self.dtype = dtype
        self.generator = generator

    def __iter__(self):
        while True:
            yield (
                (self.high - self.low)
                * torch.rand(self.size, dtype=self.dtype,
                             generator=self.generator)
                + self.low
            )


"""
Adapted from `torch.nn.init.trunc_normal_()` &
`torch.nn.init._no_grad_trunc_normal_()`

Modifications:
    1. Out-of-place sampling
    2. Support pseudorandom number generator input
"""
def trunc_normal(low, high, size, mean, std, dtype=None, generator=None):
    r"""Returns a Tensor with values drawn from a truncated
    normal distribution. The values are effectively drawn from the
    normal distribution :math:`\mathcal{N}(\text{mean}, \text{std}^2)`
    with values outside :math:`[low, high]` redrawn until they are within
    the bounds. The method used for generating the random values works
    best when :math:`low \leq \text{mean} \leq high`.

    Args:
        low: the minimum cutoff value
        high: the maximum cutoff value
        size: shape of returned tensor
        mean: the mean of the normal distribution
        std: the standard deviation of the normal distribution
        dtype: the desired data type of returned tensor
        generator: a pseudorandom number generator for sampling
    """

    # Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf
    def norm_cdf(x):
        # Computes standard normal cumulative distribution function
        return (1. + math.erf(x / math.sqrt(2.))) / 2.

    if (mean < low - 2 * std) or (mean > high + 2 * std):
        warnings.warn("mean is more than 2 std from [low, high] in trunc_normal. "
                      "The distribution of values may be incorrect.",
                      stacklevel=2)

    with torch.no_grad():
        # Values are generated by using a truncated uniform distribution and
        # then using the inverse CDF for the normal distribution.
        # Get upper and lower cdf values
        l = norm_cdf((low - mean) / std)
        u = norm_cdf((high - mean) / std)

        # Uniformly fill tensor with values from [l, u], then translate to
        # [2l-1, 2u-1].
        tensor = (
            2 * (u - l) * torch.rand(size, dtype=dtype, generator=generator)
            + (2 * l - 1)
        )

        # Use inverse cdf transform for normal distribution to get truncated
        # standard normal
        tensor.erfinv_()

        # Transform to proper mean, std
        tensor.mul_(std * math.sqrt(2.))
        tensor.add_(mean)

        # Clamp to ensure it's in the proper range
        tensor.clamp_(min=low, max=high)
        return tensor


class TruncatedNormalSampler(torch.utils.data.IterableDataset):
    def __init__(self, low, high, size, mean, std, dtype=None, generator=None):
        super().__init__()
        self.low = low
        self.high = high
        self.size = size
        self.mean = mean
        self.std = std
        self.dtype = dtype
        self.generator = generator

    def __iter__(self):
        while True:
            yield trunc_normal(
                self.low, self.high, self.size, self.mean, self.std,
                dtype=self.dtype, generator=self.generator
            )


class DiracDeltaSampler(torch.utils.data.IterableDataset):
    def __init__(self, center, size, dtype=None):
        super().__init__()
        self.center = center
        self.size = size
        self.dtype = dtype

    def __iter__(self):
        while True:
            if isinstance(self.size, int):
                size = (self.size, )
            yield torch.full(size, self.center, dtype=self.dtype)
